
public class Movie2 extends Movie {
  public Movie2(PApplet parent, String filename) {
    super(parent, filename);
  }
  public void jump(float where) {
    //if (seeking) return;

    //if (!sinkReady) {
    //  initSink();
    //}

    //// Round the time to a multiple of the source framerate, in
    //// order to eliminate stutter. Suggested by Daniel Shiffman
    //float fps = getSourceFrameRate();
    //int frame = (int)(where * fps);
    //where = frame / fps;

    //boolean res;
    //long pos = Video.secToNanoLong(where);

    //res = playbin.seek(rate, Format.TIME, SeekFlags.FLUSH, 
    //  SeekType.SET, pos, SeekType.NONE, -1);

    //if (!res) {
    //  PGraphics.showWarning("Seek operation failed.");
    //}

    //// getState() will wait until any async state change
    //// (like seek in this case) has completed
    //seeking = true;
    //playbin.getState();
    //seeking = false;    

    if (seeking) return; // don't seek again until the current seek operation is done.

    if (!sinkReady) {
      initSink();
    }

    // Round the time to a multiple of the source framerate, in
    // order to eliminate stutter. Suggested by Daniel Shiffman    
    float fps = getSourceFrameRate();
    int frame = (int)(where * fps);
    final float seconds = frame / fps;

    // Put the seek operation inside a thread to avoid blocking the main 
    // animation thread
    Thread seeker = new Thread() {
      @Override
        public void run() {
        long pos = secToNanoLong(seconds);
        boolean res = playbin.seek(rate, org.gstreamer.Format.TIME, org.gstreamer.SeekFlags.FLUSH, 
          org.gstreamer.SeekType.SET, pos, org.gstreamer.SeekType.NONE, -1);
        if (!res) {
          PGraphics.showWarning("Seek operation failed.");
        }

        // getState() will wait until any async state change
        // (like seek in this case) has completed
        seeking = true;
        playbin.getState();
        seeking = false;
      }
    };
    seeker.start();
  }
  long secToNanoLong(float sec) {
    Float f = new Float(sec * 1E9);
    return f.longValue();
  }
}